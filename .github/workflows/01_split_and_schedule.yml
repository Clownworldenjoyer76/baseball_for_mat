name: "01 Split & Schedule"

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["00 Fetch & Normalize"]   # must match 00's name exactly
    types: [completed]
    branches: [main]

permissions:
  contents: write

# Optional but recommended so two runs don't collide
concurrency:
  group: split-schedule-${{ github.ref }}
  cancel-in-progress: false

jobs:
  split_sched:
    # allow manual runs OR only run after 00 succeeded
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-py-

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run stage with unified logs
        shell: bash
        run: |
          set +e
          mkdir -p summaries/split_sched data/temp_inputs data/adjusted data/bets
          STATUS="summaries/split_sched/status.txt"
          LOG="summaries/split_sched/log.txt"
          ERR="summaries/split_sched/errors.txt"
          SUM="summaries/split_sched/summary.txt"
          : >"$STATUS"; : >"$LOG"; : >"$ERR"; : >"$SUM"

          ts(){ TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z"; }
          run_step(){
            echo "START: $1 ($(ts))" >>"$LOG"
            step_name="$1"
            shift
            "$@" >>"$LOG" 2>step.err
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "OK   $step_name [$(ts)]" >>"$STATUS"
            else
              echo "FAIL $step_name [$(ts)]" >>"$STATUS"
              {
                echo "ERROR $step_name [$(ts)]:"
                cat step.err
                echo
                echo '---'
                echo
              } >>"$ERR"
            fi
            rm -f step.err
            echo "END  : $step_name ($(ts))" >>"$LOG"
            echo >>"$LOG"
          }

          # cache inputs so scripts don't mutate originals mid-run
          cp -f data/cleaned/batters_today.csv               data/temp_inputs/batters_today_copy.csv || true
          cp -f data/raw/todaysgames_normalized.csv          data/temp_inputs/todaysgames_normalized_copy.csv || true
          cp -f data/cleaned/pitchers_normalized_cleaned.csv data/temp_inputs/pitchers_normalized_cleaned_copy.csv || true

          run_step splitaway.py                 python scripts/splitaway.py "data/temp_inputs/batters_today_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/batters_away.csv"
          run_step splithome.py                 python scripts/splithome.py "data/temp_inputs/batters_today_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/batters_home.csv"
          run_step updatesplitcsvs.py           python scripts/updatesplitcsvs.py
          run_step commit_split_batters.py      python scripts/commit_split_batters.py
          run_step normalize_pitcher_home_away  python scripts/normalize_pitcher_home_away.py "data/temp_inputs/pitchers_normalized_cleaned_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/pitchers_home.csv" "data/adjusted/pitchers_away.csv"
          run_step pitcherfilecleanup.py        python scripts/pitcherfilecleanup.py
          run_step bet_prep_1.py                python scripts/bet_prep_1.py

          {
            echo "===== RUN TIMESTAMP: $(ts) ====="
            echo; echo "===== STATUS =====";  cat "$STATUS"
            echo; echo "===== LOG =====";     cat "$LOG"
            echo; echo "===== ERRORS =====";  cat "$ERR"
          } > "$SUM"

      - name: Commit stage outputs
        run: |
          git add --force data/adjusted/batters_*.csv || true
          git add --force data/adjusted/pitchers_*.csv || true
          git add data/bets/mlb_sched.csv || true
          git add summaries/split_sched/* || true
          git diff --cached --quiet || git commit -m "01 split & schedule outputs"
          git pull --rebase origin main || true
          git push origin HEAD:main || true
