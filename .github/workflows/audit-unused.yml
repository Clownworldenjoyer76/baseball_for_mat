name: Audit Unused Files

on:
  workflow_dispatch:
    inputs:
      persist_to_repo:
        description: "Commit summaries/archive/* to main"
        required: true
        default: "false"
        type: choice
        options: ["false","true"]

permissions:
  contents: write   # needed only if persist_to_repo=true; harmless otherwise

jobs:
  audit:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Run audit (generate summaries/archive files)
        id: audit
        run: |
          set -euo pipefail
          python - <<'PY'
          import csv, os, pathlib, subprocess, re, sys

          ROOT = pathlib.Path(".")
          OUT_DIR = ROOT / "summaries" / "archive"
          OUT_DIR.mkdir(parents=True, exist_ok=True)
          OUT_CSV = OUT_DIR / "audit_unused_report.csv"
          OUT_TXT = OUT_DIR / "candidates.txt"

          def git_last_date(path):
              try:
                  return subprocess.check_output(
                      ["git","log","-1","--format=%cs","--", str(path)],
                      text=True
                  ).strip() or "NO_HISTORY"
              except Exception:
                  return "NO_HISTORY"

          SEARCH_GLOBS = ["*.py","*.md","*.yml","*.yaml","*.toml","*.json","*.sh","*.txt",
                          "*.ipynb","*.html","Makefile",".github/workflows/*.yml","Dockerfile",
                          "setup.cfg","setup.py","pyproject.toml"]
          searchable = []
          for g in SEARCH_GLOBS:
              searchable += [p for p in ROOT.rglob(g) if ".git" not in p.parts and "venv" not in p.parts]

          def referenced_any(path):
              name = os.path.basename(path)
              name_l = name.lower().encode()
              for f in searchable:
                  try:
                      b = f.read_bytes().lower()
                  except Exception:
                      continue
                  if name_l in b:
                      return True
              return False

          py_files = [p for p in ROOT.rglob("*.py") if ".git" not in p.parts and "venv" not in p.parts]
          imported_mods = set()
          imp_re = re.compile(r'^\s*(?:from|import)\s+([a-zA-Z0-9_\.]+)')
          for p in py_files:
              try:
                  for line in p.read_text(errors="ignore").splitlines():
                      m = imp_re.match(line)
                      if m:
                          imported_mods.add(m.group(1).split('.')[0])
              except Exception:
                  pass

          def module_name(p: pathlib.Path):
              return p.stem

          rows = [("path","type","git_last_modified","referenced_anywhere","imported_by_others","archive_candidate","reason")]
          candidates = []

          for p in ROOT.rglob("*"):
              if p.is_dir(): continue
              if ".git" in p.parts or "venv" in p.parts: continue
              if p.suffix not in {".py",".csv"}: continue

              typ = p.suffix.lstrip(".")
              refd = referenced_any(p)
              impd = "N/A"
              if typ == "py":
                  impd = module_name(p) in imported_mods

              shebang = False
              try:
                  shebang = p.read_bytes().startswith(b"#!")
              except Exception:
                  pass

              archive = False
              reason = ""
              if typ == "csv":
                  archive = (not refd)
                  if archive: reason = "CSV not referenced anywhere"
              elif typ == "py":
                  archive = (not refd) and (impd is False) and (not shebang)
                  if archive:
                      reason = "PY not referenced, not imported, no shebang"

              rows.append((
                  str(p),
                  typ,
                  git_last_date(p),
                  "YES" if refd else "NO",
                  "YES" if impd is True else ("NO" if impd is False else "N/A"),
                  "YES" if archive else "NO",
                  reason
              ))
              if archive:
                  candidates.append(str(p))

          with OUT_CSV.open("w", newline="") as f:
              csv.writer(f).writerows(rows)
          with OUT_TXT.open("w") as f:
              for c in candidates:
                  f.write(c + "\n")

          print(f"WROTE {OUT_CSV}")
          print(f"WROTE {OUT_TXT} ({len(candidates)} candidates)")
          PY

      - name: Upload artifacts (report + candidates)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-unused-summaries
          path: |
            summaries/archive/audit_unused_report.csv
            summaries/archive/candidates.txt

      - name: Commit summaries to repo (optional)
        if: ${{ inputs.persist_to_repo == 'true' }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout main
          git pull --ff-only origin main
          git add summaries/archive/audit_unused_report.csv summaries/archive/candidates.txt
          git commit -m "chore: update audit summaries (no file moves)" || echo "No changes to commit."
          git push origin main

      - name: Job Summary (always write)
        if: always()
        run: |
          echo "## Potential archive candidates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -s summaries/archive/candidates.txt ]; then
            COUNT=$(wc -l < summaries/archive/candidates.txt | tr -d ' ')
            echo "**Count:** $COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            while read -r line; do
              echo "- $line" >> $GITHUB_STEP_SUMMARY
            done < summaries/archive/candidates.txt
          else
            echo "No candidates found." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Full CSV:** \`summaries/archive/audit_unused_report.csv\` (also attached as artifact)" >> $GITHUB_STEP_SUMMARY
