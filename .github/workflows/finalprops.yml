name: Build Batter Projections & Final Props

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-finalize:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PYTHONDONTWRITEBYTECODE: "1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            python -m pip install "pandas==2.2.2" numpy
          fi

      - name: Git config
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git config --global pull.rebase false

      # ---------- Upstream: build batter projections ----------
      - name: Show inputs for projections
        run: |
          ls -l data/end_chain/final || true
          echo "Preview bat_today_final.csv (first 15 lines):"
          sed -n '1,15p' data/end_chain/final/bat_today_final.csv || true

      - name: Snapshot pre-run hashes
        id: prehash
        run: |
          set -e
          for f in \
            data/_projections/batter_props_projected.csv \
            data/bets/prep/batter_props_final.csv \
            data/bets/player_props_history.csv \
            data/bets/game_props_history.csv
          do
            if [ -f "$f" ]; then
              echo "$(sha256sum "$f")"
            else
              echo "MISSING $f"
            fi
          done > prehash.txt
          cat prehash.txt

      - name: Run project_batter_props.py (upstream probabilities)
        run: python -B scripts/project_batter_props.py

      - name: Validate probability spread (projected)
        run: |
          python - << 'PY'
          import pandas as pd, sys
          p = "data/_projections/batter_props_projected.csv"
          df = pd.read_csv(p)
          prob_cols = [c for c in ["prob_hits_over_1p5","prob_hr_over_0p5","prob_tb_over_1p5"] if c in df.columns]
          if not prob_cols:
            print("No upstream prob_* columns present (ok if script was not updated yet)."); sys.exit(0)
          s = pd.concat([df[c].dropna() for c in prob_cols], ignore_index=True)
          if s.empty or s.nunique() < 10:
            print("Upstream probabilities look too flat."); print(s.describe()); sys.exit(1)
          print("Upstream probability spread looks OK.")
          PY

      # ---------- Final: build history (games) ----------
      - name: Run final_props_1.py
        run: |
          python -m py_compile scripts/final_props_1.py
          python -B scripts/final_props_1.py

      - name: Run final_scores_1.py
        run: |
          python -m py_compile scripts/final_scores_1.py
          python -B scripts/final_scores_1.py

      # ---------- Derive proj_home_score / proj_away_score and totals/favorite ----------
      - name: Run final_scores_2.py (update game totals & favorite)
        run: |
          python -m py_compile scripts/final_scores_2.py
          python -B scripts/final_scores_2.py

      # ---------- Build batter_props_final.csv (prep) ----------
      - name: Run build_batter_props_final.py (produce prep file)
        run: |
          python -m py_compile scripts/build_batter_props_final.py
          python -B scripts/build_batter_props_final.py

      - name: Quick check batter_props_final.csv
        run: |
          set -e
          echo "Head of batter_props_final.csv:"
          head -n 20 data/bets/prep/batter_props_final.csv || true

      # ---------- Append prep batter props into player history ----------
      - name: Append player history from prep
        run: |
          python -m py_compile scripts/append_player_history_from_prep.py
          python -B scripts/append_player_history_from_prep.py

      # ---------- Canonicalize today's histories ----------
      - name: Run update_history.py (canonical history writer)
        run: |
          python -m py_compile scripts/update_history.py
          python -B scripts/update_history.py

      # ---------- DEBUG: show contents and row counts after update ----------
      - name: Debug history after update
        run: |
          set -e
          echo "Listing data/bets:"
          ls -lh data/bets || true
          echo
          echo "Head of player_props_history.csv:"
          head -n 20 data/bets/player_props_history.csv || true
          echo
          echo "Head of game_props_history.csv:"
          head -n 20 data/bets/game_props_history.csv || true
          echo
          python - << 'PY'
          import pandas as pd, datetime
          from pathlib import Path
          today = datetime.date.today()
          for p in ["data/bets/player_props_history.csv","data/bets/game_props_history.csv"]:
              path = Path(p)
              if not path.exists():
                  print(f"{p}: MISSING")
                  continue
              try:
                  df = pd.read_csv(path)
              except Exception as e:
                  print(f"{p}: failed to read - {e}")
                  continue
              print(f"{p}: {len(df)} rows total")
              if "date" in df.columns:
                  ds = pd.to_datetime(df["date"], errors="coerce").dt.date
                  print(f"{p}: {int((ds==today).sum())} rows for today ({today})")
              else:
                  print(f"{p}: no 'date' column present")
          PY

      - name: Show deltas & tails
        run: |
          set -e
          echo "Post-run hashes:"
          for f in \
            data/_projections/batter_props_projected.csv \
            data/bets/prep/batter_props_final.csv \
            data/bets/player_props_history.csv \
            data/bets/game_props_history.csv
          do
            if [ -f "$f" ]; then
              echo "$(sha256sum "$f")"
            else
              echo "MISSING $f"
            fi
          done > posthash.txt
          cat posthash.txt
          echo
          echo "Diff hashes:"
          diff -u prehash.txt posthash.txt || true
          echo
          echo "Tail of batter_props_projected.csv:"; tail -n 5 data/_projections/batter_props_projected.csv || true
          echo
          echo "Tail of batter_props_final.csv:";   tail -n 5 data/bets/prep/batter_props_final.csv || true
          echo
          echo "Tail of player_props_history.csv:"; tail -n 5 data/bets/player_props_history.csv || true
          echo
          echo "Tail of game_props_history.csv:";   tail -n 5 data/bets/game_props_history.csv || true

      - name: Commit and push changes (rebase if remote advanced)
        shell: bash
        run: |
          set -e
          BRANCH="${GITHUB_REF_NAME:-main}"
          git fetch origin "$BRANCH"
          git pull --rebase --autostash origin "$BRANCH"
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Automated: update projections, prep file, props history, and final scores"
          git push origin "HEAD:$BRANCH"

      - name: Upload artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: props-output
          path: |
            data/_projections/batter_props_projected.csv
            data/bets/prep/batter_props_final.csv
            data/bets/player_props_history.csv
            data/bets/game_props_history.csv
