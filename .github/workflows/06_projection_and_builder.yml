name: projections_builder

on:
  workflow_dispatch:
  push:
    paths:
      - 'scripts/**'
      - 'data/**'
      - '.github/workflows/06_projection_and_builder.yml'
  schedule:
    - cron: '15 10 * * *'  # optional: daily @ 10:15 UTC; adjust or remove

env:
  PYTHONUNBUFFERED: '1'
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  FORCE_COLOR: '1'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.10-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-3.10-

      - name: Install dependencies
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run projection pipeline
        id: run_pipeline
        run: |
          set -euo pipefail

          # --- paths
          SUMMARY_DIR="summaries/projections"
          SUMMARY_TXT="${SUMMARY_DIR}/status.txt"
          SUMMARY_LOG="${SUMMARY_DIR}/summary.txt"
          mkdir -p "${SUMMARY_DIR}"

          # fresh status/log each run
          : > "${SUMMARY_TXT}"
          : > "${SUMMARY_LOG}"

          # nice timestamp header
          TS="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "===== RUN TIMESTAMP: ${TS} ====="         | tee -a "${SUMMARY_LOG}"
          echo ""                                      | tee -a "${SUMMARY_LOG}"
          echo "===== STATUS ====="                    | tee -a "${SUMMARY_LOG}"

          run_step () {
            local title="$1"
            shift
            local cmd="$*"

            local start_local="$(date '+%Y-%m-%d %I:%M:%S %p %Z')"
            echo ""                                   | tee -a "${SUMMARY_LOG}"
            echo ">> START: ${title} (${start_local})" | tee -a "${SUMMARY_LOG}"

            if eval ${cmd}; then
              echo "[OK] ${title} succeeded [${start_local}]"  | tee -a "${SUMMARY_LOG}"
              echo "[OK] ${title}" >> "${SUMMARY_TXT}"
            else
              echo "[FAIL] ${title} failed [${start_local}]"   | tee -a "${SUMMARY_LOG}"
              echo "[FAIL] ${title}" >> "${SUMMARY_TXT}"
              return 1
            fi
          }

          # -------- execution order (each step exits early but status persists)
          FAILED=0

          # 1) generate "fixed" versions used by finalizer
          run_step "fix_outputs_generate_fixed_files.py" \
            "python scripts/fix_outputs_generate_fixed_files.py" || FAILED=1

          # 2) apply fixed todaysgames (no-op if not needed)
          run_step "apply_fixed_todaysgames" \
            "bash scripts/apply_fixed_todaysgames" || FAILED=1

          # 3) prep starters with opp context
          run_step "project_prep.py" \
            "python scripts/project_prep.py" || FAILED=1

          # 4) batter fixes/normalize/project
          run_step "fix_missing_batter_stats.py" \
            "python scripts/fix_missing_batter_stats.py" || FAILED=1

          run_step "normalize_batters_for_builder.py" \
            "python scripts/normalize_batters_for_builder.py" || FAILED=1

          run_step "project_batter_props.py" \
            "python scripts/project_batter_props.py" || FAILED=1

          # 5) pitcher props + mega-z
          run_step "project_pitcher_props.py" \
            "python scripts/project_pitcher_props.py" || FAILED=1

          run_step "build_expanded_batter_props.py" \
            "python scripts/build_expanded_batter_props.py" || FAILED=1

          run_step "pitcher_mega_z.py" \
            "python scripts/pitcher_mega_z.py" || FAILED=1

          # 5.1) strict player_id coverage guard for starters vs mega_z
          run_step "starter_coverage_guard.py" \
            "python scripts/starter_coverage_guard.py" || FAILED=1

          # 6) cleanup/normalize post
          run_step "post_normalize_pitchers.py" \
            "python scripts/post_normalize_pitchers.py" || FAILED=1

          # 7) finalize final CSVs (batter & pitcher + mega_z finals)
          run_step "finalize_projections.py" \
            "python scripts/finalize_projections.py" || FAILED=1

          # 8) inject/adjust
          run_step "clean_inject_team_ids.py" \
            "python scripts/clean_inject_team_ids.py" || FAILED=1

          run_step "inject_game_ids_from_schedule.py" \
            "python scripts/inject_game_ids_from_schedule.py" || FAILED=1

          run_step "inject_batter_woba_adjustments.py" \
            "python scripts/inject_batter_woba_adjustments.py" || FAILED=1

          run_step "clean_pitcher_files.py" \
            "python scripts/clean_pitcher_files.py" || FAILED=1

          run_step "impute_missing_batter_adj_woba.py" \
            "python scripts/impute_missing_batter_adj_woba.py" || FAILED=1

          run_step "fix_missing_pa_in_pitcher_daily.py" \
            "python scripts/fix_missing_pa_in_pitcher_daily.py" || FAILED=1

          echo ""                                   | tee -a "${SUMMARY_LOG}"
          echo "===== ERRORS ====="                 | tee -a "${SUMMARY_LOG}"
          if grep -qE '^\[FAIL\]' "${SUMMARY_TXT}"; then
            echo "One or more steps failed. See above." | tee -a "${SUMMARY_LOG}"
            echo "failed=true" >> $GITHUB_OUTPUT
          else
            echo "None" | tee -a "${SUMMARY_LOG}"
            echo "failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload summaries as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: projections_summaries
          path: |
            summaries/**
            data/end_chain/final/**
            data/_projections/**
          if-no-files-found: warn
          retention-days: 7

      - name: Fail if errors
        if: steps.run_pipeline.outputs.failed == 'true'
        run: |
          cat summaries/projections/summary.txt || true
          echo "Error: One or more steps failed." >&2
          exit 1

      - name: Commit stage outputs
        if: always()
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "CI: stage outputs ($(date -u '+%Y-%m-%d %H:%M:%S UTC'))"
            git push
          fi
