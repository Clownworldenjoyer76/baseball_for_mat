name: 06 Projection and Builder

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history, pinned branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pipeline (with clean logs and status)
        run: |
          set -e
          mkdir -p summaries/06_projection
          STATUS="summaries/06_projection/status.txt"
          : > "$STATUS"

          run_py () {
            local file="$1"
            local name="$(basename "$file")"
            local ts="$(date '+%Y-%m-%d %H:%M:%S %Z')"
            local log="summaries/06_projection/${name}.log"
            local script_path="scripts/${name}"

            # If script doesn't exist, mark as SKIP (not a failure) and move on
            if [ ! -f "$script_path" ]; then
              echo ">> START: ${name} (${ts})" > "$log"
              echo "SKIP: ${script_path} not found" | tee -a "$log"
              echo "[OK] ${name} skipped (missing) [${ts}]" >> "$STATUS"
              echo "[END] ${name} (${ts})" | tee -a "$log"
              return 0
            fi

            # Start fresh log (overwrite)
            echo ">> START: ${name} (${ts})" > "$log"

            set +e
            python "$script_path" |& tee -a "$log"
            code=${PIPESTATUS[0]}
            set -e

            if [ $code -eq 0 ]; then
              echo "[OK] ${name} succeeded [${ts}]" >> "$STATUS"
            else
              echo "[FAIL] ${name} failed [${ts}]" >> "$STATUS"
            fi
            echo "[END] ${name} (${ts})" | tee -a "$log"
            return $code
          }

          # Pipeline (logs overwritten each run; missing scripts are skipped without failing)
          run_py fix_outputs_generate_fixed_files.py || true
          run_py normalize_inputs_for_06.py || true
          run_py project_prep.py || true
          run_py fix_missing_batter_stats.py || true
          run_py normalize_batters_for_builder.py || true
          run_py project_batter_props.py || true
          run_py project_pitcher_props.py || true

          # Inject pitcher context (robust first; fallback to TGN-only if present)
          run_py inject_pitcher_context.py || true
          run_py inject_pitcher_context_from_tgn.py || true

          run_py build_expanded_batter_props.py || true
          run_py pitcher_mega_z.py || true
          run_py starter_coverage_guard.py || true
          run_py post_normalize_pitchers.py || true
          run_py finalize_projections.py || true
          run_py clean_inject_team_ids.py || true
          run_py inject_game_ids_from_schedule.py || true
          run_py inject_batter_woba_adjustments.py || true
          run_py clean_pitcher_files.py || true
          run_py impute_missing_batter_adj_woba.py || true
          run_py fix_missing_pa_in_pitcher_daily.py || true

      - name: Commit & push outputs
        if: always()
        run: |
          set -e
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          echo "=== git status (before add) ==="
          git status --porcelain || true

          git add \
            data/_projections/*.csv \
            data/end_chain/final/*.csv \
            data/raw/*.csv \
            summaries/06_projection/*.log \
            summaries/06_projection/status.txt 2>/dev/null || true

          echo "=== git status (after add) ==="
          git status --porcelain || true

          git commit -m "06 Projection: commit generated outputs and logs" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Write & push deep summary (overwrite)
        if: always()
        run: |
          set -e
          mkdir -p summaries/06_projection

          SUMMARY="summaries/06_projection/summary.txt"
          STATUS="summaries/06_projection/status.txt"

          {
            echo "===== RUN TIMESTAMP: $(date) ====="
            echo
            echo "===== STATUS (per script) ====="
            if [ -s "$STATUS" ]; then
              cat "$STATUS"
            else
              echo "(status.txt not generated)"
            fi
            echo
            echo "===== FAILURES: LAST 80 LINES OF EACH FAILED SCRIPT LOG ====="
            if [ -s "$STATUS" ]; then
              awk '/^\[FAIL\]/{print $2}' "$STATUS" | while read -r fname; do
                LOG="summaries/06_projection/${fname}.log"
                echo "---- ${fname} ----"
                if [ -f "$LOG" ]; then
                  tail -n 80 "$LOG"
                else
                  echo "(no log at $LOG)"
                fi
                echo
              done
            else
              echo "(no failures recorded)"
            fi
            echo
            echo "===== LOGS: LAST 20 LINES OF ALL SCRIPT LOGS ====="
            for LOG in summaries/06_projection/*.log; do
              [ -f "$LOG" ] || continue
              echo "---- $(basename "$LOG") ----"
              tail -n 20 "$LOG"
              echo
            done
          } > "$SUMMARY"

          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add "$SUMMARY"
          git commit -m "06 Projection: overwrite summary.txt [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"
