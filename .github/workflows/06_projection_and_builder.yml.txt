name: 06 Projection and Builder

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout repo (full history, pinned branch)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Clean logs (fresh run only)
        run: |
          set -euo pipefail
          rm -f summaries/06_projection/*.log summaries/06_projection/status.txt summaries/06_projection/summary.txt || true
          mkdir -p summaries/06_projection

      - name: Run pipeline (with clean logs and status)
        run: |
          set -e
          mkdir -p summaries/06_projection
          STATUS="summaries/06_projection/status.txt"
          : > "$STATUS"

          run_py () {
            local file="$1"
            local name="$(basename "$file")"
            local ts="$(date '+%Y-%m-%d %H:%M:%S %Z')"
            local log="summaries/06_projection/${name}.log"
            local script_path="scripts/${name}"

            # If script doesn't exist, mark as SKIP (not a failure) and move on
            if [ ! -f "$script_path" ]; then
              echo ">> START: ${name} (${ts})" > "$log"
              echo "SKIP: ${script_path} not found" | tee -a "$log"
              echo "[OK] ${name} skipped (missing) [${ts}]" >> "$STATUS"
              echo "[END] ${name} (${ts})" | tee -a "$log"
              return 0
            fi

            # Start fresh log (overwrite)
            echo ">> START: ${name} (${ts})" > "$log"

            set +e
            python "$script_path" |& tee -a "$log"
            code=${PIPESTATUS[0]}
            set -e

            if [ $code -eq 0 ]; then
              echo "[OK] ${name} succeeded [${ts}]" >> "$STATUS"
            else
              echo "[FAIL] ${name} failed [${ts}]" >> "$STATUS"
            fi
            echo "[END] ${name} (${ts})" | tee -a "$log"
            return $code
          }

          # ---- Pipeline order (kept as-is) ----
          run_py fix_outputs_generate_fixed_files.py || true
          run_py normalize_inputs_for_06.py || true
          run_py project_prep.py || true
          run_py fix_missing_batter_stats.py || true
          run_py normalize_batters_for_builder.py || true

          # Batter projections (this is where project_batter_props.py runs)
          # Your updated script now ensures slate-complete *_final batter files when needed.
          run_py project_batter_props.py || true
          run_py project_pitcher_props.py || true

          # Pitcher context & builder
          run_py inject_pitcher_context.py || true
          run_py inject_pitcher_context_from_tgn.py || true
          run_py build_expanded_batter_props.py || true
          run_py pitcher_mega_z.py || true
          run_py starter_coverage_guard.py || true
          run_py post_normalize_pitchers.py || true
          run_py finalize_projections.py || true

          # Clean/inject pass-through steps
          run_py clean_inject_team_ids.py || true
          run_py inject_game_ids_from_schedule.py || true
          run_py inject_batter_woba_adjustments.py || true
          run_py clean_pitcher_files.py || true
          run_py impute_missing_batter_adj_woba.py || true

      - name: Commit & push outputs
        if: always()
        run: |
          set -euo pipefail
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          git add \
            data/_projections/*.csv \
            data/end_chain/final/*.csv \
            data/raw/*.csv \
            summaries/06_projection/*.log \
            summaries/06_projection/status.txt 2>/dev/null || true

          git commit -m "06 Projection: commit generated outputs and logs" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Write & push summary (overwrite, current run only)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p summaries/06_projection

          SUMMARY="summaries/06_projection/summary.txt"
          STATUS="summaries/06_projection/status.txt"
          CLEAN_LOG="summaries/06_projection/clean_pitcher_files.py.log"

          {
            echo "===== RUN TIMESTAMP: $(date '+%Y-%m-%d %H:%M:%S %Z') ====="
            echo
            echo "===== STATUS (per script) ====="
            if [ -s "$STATUS" ]; then
              cat "$STATUS"
            else
              echo "(status.txt not generated)"
            fi
            echo
            echo "===== KEY COUNTS ====="
            if [ -f "$CLEAN_LOG" ]; then
              starters_line=$(grep -E 'Starters seen today:' "$CLEAN_LOG" | tail -n 1 || true)
              if [ -n "$starters_line" ]; then
                starters=$(echo "$starters_line" | awk -F': ' '{print $2}')
                echo "starters_today: ${starters}"
              else
                echo "starters_today: (not found)"
              fi
            else
              echo "starters_today: (clean_pitcher_files.py.log not found)"
            fi
            echo
            echo "===== LOGS: LAST 20 LINES OF ALL SCRIPT LOGS (current run) ====="
            for LOG in summaries/06_projection/*.log; do
              [ -f "$LOG" ] || continue
              echo "---- $(basename "$LOG") ----"
              tail -n 20 "$LOG"
              echo
            done
          } > "$SUMMARY"

          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add "$SUMMARY"
          git commit -m "06 Projection: overwrite summary.txt [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"
