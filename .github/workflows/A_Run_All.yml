name: A_Run_All

on:
  workflow_dispatch:

env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

jobs:
  A_Run_All:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install pandas unidecode requests

      - name: Run All Scripts + Generate Logs
        run: |
          mkdir -p summaries/A_Run_All
          > summaries/A_Run_All/errors.txt

          run_step() {
            SCRIPT="$1"
            STEP_NAME=$(basename "$SCRIPT" .py)
            LOG="summaries/A_Run_All/${STEP_NAME}.log"
            TXT="summaries/A_Run_All/${STEP_NAME}.txt"
            TIMESTAMP=$(TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")

            if python "scripts/${SCRIPT}" > "$LOG" 2> temp_error.log; then
              echo "✅ ${STEP_NAME} ran successfully." > "$TXT"
            else
              echo "❌ ${STEP_NAME} encountered an error." > "$TXT"
              echo "❌ ${STEP_NAME} ERROR:" >> summaries/A_Run_All/errors.txt
              cat temp_error.log >> summaries/A_Run_All/errors.txt
              echo -e "\n---\n" >> summaries/A_Run_All/errors.txt
            fi

            echo "🕒 Timestamp: $TIMESTAMP" >> "$LOG"
            echo "🕒 Timestamp: $TIMESTAMP" >> "$TXT"
          }

          run_step normalize_names.py
          run_step tag_master_files.py
          run_step deduplicate_normalized.py
          run_step normalize_lineups.py
          run_step normalize_todays_games.py
          run_step apply_team_name_mapping.py
          run_step update_game_time.py
          run_step split_batters_by_home_away.py
          run_step split_pitchers.py
          run_step import pandas as pd
from unidecode import unidecode
import os

PITCHER_REF_FILE = "data/Data/pitchers.csv"

FILES = {
    "data/adjusted/pitchers_home.csv": "pitcher_home",
    "data/adjusted/pitchers_away.csv": "pitcher_away",
}

def normalize_name(name):
    if pd.isna(name): return name
    name = unidecode(name).lower().strip()
    parts = name.split()
    if len(parts) >= 2:
        return f"{parts[-1].title()}, {' '.join(parts[:-1]).title()}"
    return name.title()

def main():
    try:
        ref_pitchers = pd.read_csv(PITCHER_REF_FILE)
        ref_pitchers["normalized_name"] = ref_pitchers["last_name, first_name"].apply(normalize_name)
        ref_set = set(ref_pitchers["normalized_name"])

        for path, pitcher_col in FILES.items():
            if not os.path.exists(path):
                print(f"❌ Missing file: {path}")
                continue

            df = pd.read_csv(path)

            # Drop old 'name' column if exists
            if "name" in df.columns:
                df = df.drop(columns=["name"])

            # Normalize 'last_name, first_name' if present
            if "last_name, first_name" in df.columns:
                df["last_name, first_name"] = df["last_name, first_name"].apply(normalize_name)
                df = df[df["last_name, first_name"].isin(ref_set)]

            # Normalize pitcher_* if present
            if pitcher_col in df.columns:
                df[pitcher_col] = df[pitcher_col].apply(normalize_name)
                df = df[df[pitcher_col].isin(ref_set)]

            df.to_csv(path, index=False)
            print(f"✅ Normalized and saved: {path}")

    except Exception as e:
        print(f"❌ Error: {e}")

if __name__ == "__main__":
    main()
          run_step generate_weather_csv.py
          run_step filter_today_batters.py
          run_step get_weather_data.py
          run_step apply_weather_adjustment.py
          run_step apply_park_adjustment.py
          run_step combine_weather_park_home.py
          run_step combine_weather_park_away.py

          # 🔧 FIX + CLEAN BEFORE MERGING
          run_step normalize_pitcher_weather_outputs.py
          run_step fix_away_team_column.py
          run_step preprocess_pitcher_weather_park_away.py

          # 🧱 APPLY PARK ADJUSTMENTS
          run_step apply_pitcher_weather_adjustment.py
          run_step apply_pitcher_park_adjustment.py
         
          # 🧼 CLEAN + NORMALIZE BEFORE FINAL COMBINE
          run_step normalize_pitcher_merge_inputs.py

          # 🔀 FINAL COMBINE
          run_step combine_pitcher_weather_park_home.py
          run_step combine_pitcher_weather_park_away.py

          FINAL_TS=$(TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")
          {
            echo "✅ A_Run_All Summary — $FINAL_TS"
            for FILE in summaries/A_Run_All/*.txt; do
              echo "$(basename "$FILE")"
            done
          } > summaries/A_Run_All/a_run_all.txt

      - name: Commit All Logs and Outputs
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add -A
          git commit -m "A_Run_All: full summary logs committed" || echo "Nothing to commit"
          git push || echo "Nothing to push"
