name: A_Run_All

on:
  workflow_dispatch:

env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

permissions:
  contents: write

jobs:
  A_Run_All:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Ensure we‚Äôre on a real branch, not detached HEAD

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt unidecode

      - name: Run All Scripts + Unified Logs
        run: |
          mkdir -p summaries
          STATUS_FILE="summaries/status.txt"
          LOG_FILE="summaries/log.txt"
          ERRORS_FILE="summaries/errors.txt"
          SUMMARY_FILE="summaries/summary.txt"
          echo "" > "$STATUS_FILE"
          echo "" > "$LOG_FILE"
          echo "" > "$ERRORS_FILE"
          echo "" > "$SUMMARY_FILE"

          # --- Start of Debugging Copy & Inspection for splitaway.py ---
          echo "--- Creating temporary copies for splitaway.py debugging ---"
          mkdir -p data/temp_inputs # Ensure the temporary directory exists
          cp data/cleaned/batters_today.csv data/temp_inputs/batters_today_copy.csv
          cp data/raw/todaysgames_normalized.csv data/temp_inputs/todaysgames_normalized_copy.csv
          echo "Copies created in data/temp_inputs/"

          echo "--- Inspecting copied input files for splitaway.py ---"
          echo "Content of data/temp_inputs/batters_today_copy.csv (first 5 lines):"
          head -n 5 data/temp_inputs/batters_today_copy.csv
          echo "Line count of data/temp_inputs/batters_today_copy.csv:"
          wc -l data/temp_inputs/batters_today_copy.csv

          echo "Content of data/temp_inputs/todaysgames_normalized_copy.csv (first 5 lines):"
          head -n 5 data/temp_inputs/todaysgames_normalized_copy.csv
          echo "Line count of data/temp_inputs/todaysgames_normalized_copy.csv:"
          wc -l data/temp_inputs/todaysgames_normalized_copy.csv
          echo "--- End Inspection of copied input files ---"
          # --- End of Debugging Copy & Inspection for splitaway.py ---

          run_step() {
            SCRIPT="$1"
            STEP_NAME=$(basename "$SCRIPT" .py)
            STEP_TIMESTAMP=$(TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")

            echo "‚ñ∂Ô∏è START: $STEP_NAME ($STEP_TIMESTAMP)" >> "$LOG_FILE"

            # Special handling for splitaway.py and splithome.py
            if [[ "$SCRIPT" == "splitaway.py" ]]; then
              if python "scripts/${SCRIPT}" "data/temp_inputs/batters_today_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/batters_away.csv" >> "$LOG_FILE" 2> temp_error.log; then
                echo "‚úÖ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "‚ùå $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "‚ùå $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            elif [[ "$SCRIPT" == "splithome.py" ]]; then # <--- NEW: Special handling for splithome.py
              if python "scripts/${SCRIPT}" "data/temp_inputs/batters_today_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/batters_home.csv" >> "$LOG_FILE" 2> temp_error.log; then
                echo "‚úÖ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "‚ùå $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "‚ùå $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            else # For all other scripts, run without special arguments
              if python "scripts/${SCRIPT}" >> "$LOG_FILE" 2> temp_error.log; then
                echo "‚úÖ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "‚ùå $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "‚ùå $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            fi

            echo "‚èπÔ∏è END: $STEP_NAME ($STEP_TIMESTAMP)" >> "$LOG_FILE"
            echo "" >> "$LOG_FILE"
          }

          # üîÅ Run all steps
          run_step normalize_names.py
          run_step tag_master_files.py
          run_step validate_tagged_players.py
          run_step deduplicate_normalized.py
          run_step normalize_lineups.py
          run_step normalize_todays_games.py
          run_step refresh_stadium_metadata.py
          run_step apply_team_name_mapping.py
          run_step update_game_time.py
          run_step filter_stadium_metadata.py
          run_step normalize_batter_team_names.py
          run_step splitaway.py
          run_step splithome.py # <--- NEW: Added splithome.py call
          run_step commit_split_batters.py
          run_step normalize_pitcher_home_away.py
          run_step update_pitcher_team_names.py
          run_step generate_weather_csv.py
          run_step filter_today_batters.py
          run_step get_weather_data.py
          run_step apply_weather_adjustment.py
          run_step apply_park_adjustment.py
          run_step combine_weather_park_home.py
          run_step combine_weather_park_away.py

          # üîß FIX + CLEAN BEFORE MERGING
          run_step normalize_pitcher_weather_outputs.py
          run_step fix_away_team_column.py
          run_step preprocess_pitcher_weather_park_away.py

          # üß± APPLY PARK ADJUSTMENTS
          run_step add_team_alias_columns.py
          run_step add_team_columns_to_weather.py
          run_step apply_pitcher_weather_adjustment.py
          run_step apply_pitcher_park_adjustment.py
          run_step normalize_pitcher_merge_inputs.py

          # üîÄ FINAL COMBINE
          run_step combine_pitcher_weather_park_home.py
          run_step combine_pitcher_weather_park_away.py
          run_step prep_merge.py

          # üîó CHAIN CONNECTION
          run_step chain_setup_inputs.py
          run_step clean_and_preprocess_games.py
          run_step normalize_games_pitchers.py
          run_step normalize_pitchers_xtra.py
          run_step clean_merge_files.py
          run_step chain_load_data.py
          #run_step deduplicate_batters.py
          #run_step clean_and_preprocess_batters.py
          #run_step prep_batters_for_merge.py
          #run_step enrich_batters_away.py
          #run_step cleanup_enriched_batters_away.py
          #run_step prepopulate_batters_away.py
          run_step rename_and_merge_pitcher_data.py
          run_step pit_clean1.py
          run_step merge_data.py

          # üìÑ Combine single summary
          {
            echo "===== RUN TIMESTAMP: $(TZ='America/New_York' date +"%Y-%m-%d %I:%M:%S %p %Z") ====="
            echo ""
            echo "===== STATUS ====="
            cat "$STATUS_FILE"
            echo ""
            echo "===== LOG ====="
            cat "$LOG_FILE"
            echo ""
            echo "===== ERRORS ====="
            cat "$ERRORS_FILE"
          } > "$SUMMARY_FILE"

      - name: Show current Git branch
        run: git rev-parse --abbrev-ref HEAD

      - name: Commit batter files and summary
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Add batters_home.csv to the commit
          git add data/adjusted/batters_home.csv || echo "home not found" # <--- NEW: Added this line
          git add data/adjusted/batters_away.csv || echo "away not found"
          git add summaries/summary.txt || echo "summary not found"

          echo "üìÑ Git status:"
          git status

          git commit -m "Commit batter split + summary $(TZ='America/New_York' date +"%Y-%m-%d %H:%M:%S")" || echo "Nothing to commit"
          git push --force || echo "Nothing to push"
