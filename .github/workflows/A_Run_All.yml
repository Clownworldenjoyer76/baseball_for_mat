# ... (rest of your YAML remains the same until the 'Run All Scripts' step) ...

      - name: Run All Scripts + Unified Logs
        run: |
          mkdir -p summaries
          STATUS_FILE="summaries/status.txt"
          LOG_FILE="summaries/log.txt"
          ERRORS_FILE="summaries/errors.txt"
          SUMMARY_FILE="summaries/summary.txt"
          echo "" > "$STATUS_FILE"
          echo "" > "$LOG_FILE"
          echo "" > "$ERRORS_FILE"
          echo "" > "$SUMMARY_FILE"

          # --- Start of Debugging Copy & Inspection for batters scripts ---
          echo "--- Creating temporary copies for batter scripts debugging ---"
          mkdir -p data/temp_inputs # Ensure the temporary directory exists
          cp data/cleaned/batters_today.csv data/temp_inputs/batters_today_copy.csv
          cp data/raw/todaysgames_normalized.csv data/temp_inputs/todaysgames_normalized_copy.csv
          echo "Copies created in data/temp_inputs/"

          echo "--- Inspecting copied input files for batter scripts ---"
          echo "Content of data/temp_inputs/batters_today_copy.csv (first 5 lines):"
          head -n 5 data/temp_inputs/batters_today_copy.csv
          echo "Line count of data/temp_inputs/batters_today_copy.csv:"
          wc -l data/temp_inputs/batters_today_copy.csv

          echo "Content of data/temp_inputs/todaysgames_normalized_copy.csv (first 5 lines):"
          head -n 5 data/temp_inputs/todaysgames_normalized_copy.csv
          echo "Line count of data/temp_inputs/todaysgames_normalized_copy.csv:"
          wc -l data/temp_inputs/todaysgames_normalized_copy.csv
          echo "--- End Inspection of copied input files ---"
          # --- End of Debugging Copy & Inspection for batters scripts ---

          # --- NEW: Create and inspect temporary copies for pitcher script ---
          echo "--- Creating temporary copies for pitcher script ---"
          # Ensure a distinct temp directory for pitcher inputs, if needed,
          # or reuse data/temp_inputs if their names won't conflict.
          # For simplicity and consistency with batters, let's reuse data/temp_inputs
          # but use distinct filenames.
          cp data/cleaned/pitchers_normalized_cleaned.csv data/temp_inputs/pitchers_normalized_cleaned_copy.csv
          # todaysgames_normalized.csv is already copied for batters, if it's the same file.
          # If 'todaysgames_normalized.csv' is identical for both, no need to copy again.
          # If it's a different 'todaysgames_normalized.csv' for pitchers, adjust the source.
          echo "Pitcher inputs copied to data/temp_inputs/"

          echo "--- Inspecting copied input files for pitcher script ---"
          echo "Content of data/temp_inputs/pitchers_normalized_cleaned_copy.csv (first 5 lines):"
          head -n 5 data/temp_inputs/pitchers_normalized_cleaned_copy.csv
          echo "Line count of data/temp_inputs/pitchers_normalized_cleaned_copy.csv:"
          wc -l data/temp_inputs/pitchers_normalized_cleaned_copy.csv
          echo "--- End Inspection of copied input files for pitcher script ---"
          # --- END NEW Pitcher temp copies ---


          run_step() {
            SCRIPT="$1"
            STEP_NAME=$(basename "$SCRIPT" .py)
            STEP_TIMESTAMP=$(TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")

            echo "▶️ START: $STEP_NAME ($STEP_TIMESTAMP)" >> "$LOG_FILE"

            # Special handling for splitaway.py and splithome.py
            if [[ "$SCRIPT" == "splitaway.py" ]]; then
              if python "scripts/${SCRIPT}" "data/temp_inputs/batters_today_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/batters_away.csv" >> "$LOG_FILE" 2> temp_error.log; then
                echo "✅ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "❌ $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "❌ $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            elif [[ "$SCRIPT" == "splithome.py" ]]; then
              if python "scripts/${SCRIPT}" "data/temp_inputs/batters_today_copy.csv" "data/temp_inputs/todaysgames_normalized_copy.csv" "data/adjusted/batters_home.csv" >> "$LOG_FILE" 2> temp_error.log; then
                echo "✅ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "❌ $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "❌ $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            # --- NEW: Special handling for normalize_pitcher_home_away.py ---
            elif [[ "$SCRIPT" == "normalize_pitcher_home_away.py" ]]; then
              if python "scripts/${SCRIPT}" \
                "data/temp_inputs/pitchers_normalized_cleaned_copy.csv" \
                "data/temp_inputs/todaysgames_normalized_copy.csv" \
                "data/adjusted/pitchers_home.csv" \
                "data/adjusted/pitchers_away.csv" \
                >> "$LOG_FILE" 2> temp_error.log; then
                echo "✅ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "❌ $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "❌ $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            # --- End NEW special handling ---
            else # For all other scripts, run without special arguments
              if python "scripts/${SCRIPT}" >> "$LOG_FILE" 2> temp_error.log; then
                echo "✅ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              else
                echo "❌ $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
                echo "❌ $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
                cat temp_error.log >> "$ERRORS_FILE"
                echo -e "\n---\n" >> "$ERRORS_FILE"
              fi
            fi

            echo "⏹️ END: $STEP_NAME ($STEP_TIMESTAMP)" >> "$LOG_FILE"
            echo "" >> "$LOG_FILE"
          }

          # 🔁 Run all steps
          run_step normalize_names.py
          run_step tag_master_files.py
          run_step validate_tagged_players.py
          run_step deduplicate_normalized.py
          run_step normalize_lineups.py
          run_step normalize_todays_games.py
          run_step refresh_stadium_metadata.py
          run_step apply_team_name_mapping.py
          run_step update_game_time.py
          run_step filter_stadium_metadata.py
          run_step normalize_batter_team_names.py
          run_step splitaway.py
          run_step splithome.py
          run_step updatesplitcsvs.py
          run_step commit_split_batters.py
          # Original: run_step normalize_pitcher_home_away.py
          # Changed to use new command-line arguments for pitcher script
          run_step normalize_pitcher_home_away.py # This now uses the special handling above
          # ... (rest of the run_step calls remain the same) ...
          run_step generate_weather_csv.py
          run_step filter_today_batters.py
          run_step get_weather_data.py
          run_step apply_weather_adjustment.py
          run_step apply_park_adjustment.py
          run_step combine_weather_park_home.py
          run_step combine_weather_park_away.py

          # 🔧 FIX + CLEAN BEFORE MERGING
          run_step normalize_pitcher_weather_outputs.py
          run_step fix_away_team_column.py
          run_step preprocess_pitcher_weather_park_away.py

          # 🧱 APPLY PARK ADJUSTMENTS
          run_step add_team_alias_columns.py
          run_step add_team_columns_to_weather.py
          run_step apply_pitcher_weather_adjustment.py
          run_step apply_pitcher_park_adjustment.py
          run_step normalize_pitcher_merge_inputs.py

          # 🔀 FINAL COMBINE
          run_step combine_pitcher_weather_park_home.py
          run_step combine_pitcher_weather_park_away.py
          run_step prep_merge.py

          # 🔗 CHAIN CONNECTION
          run_step chain_setup_inputs.py
          run_step clean_and_preprocess_games.py
          run_step normalize_games_pitchers.py
          run_step normalize_pitchers_xtra.py
          run_step clean_merge_files.py
          run_step chain_load_data.py
          #run_step deduplicate_batters.py
          #run_step clean_and_preprocess_batters.py
          #run_step prep_batters_for_merge.py
          #run_step enrich_batters_away.py
          #run_step cleanup_enriched_batters_away.py
          #run_step prepopulate_batters_away.py
          run_step rename_and_merge_pitcher_data.py
          run_step pit_clean1.py
          run_step merge_data.py

          # 📄 Combine single summary
          {
            echo "===== RUN TIMESTAMP: $(TZ='America/New_York' date +"%Y-%m-%d %I:%M:%S %p %Z") ====="
            echo ""
            echo "===== STATUS ====="
            cat "$STATUS_FILE"
            echo ""
            echo "===== LOG ====="
            cat "$LOG_FILE"
            echo ""
            echo "===== ERRORS ====="
            cat "$ERRORS_FILE"
          } > "$SUMMARY_FILE"

      - name: Show current Git branch
        run: git rev-parse --abbrev-ref HEAD

      - name: Commit batter files and summary
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Add batter files to the commit
          git add data/adjusted/batters_home.csv || echo "home batter file not found or no changes"
          git add data/adjusted/batters_away.csv || echo "away batter file not found or no changes"
          # --- NEW: Add pitcher files to the commit ---
          git add data/adjusted/pitchers_home.csv || echo "home pitcher file not found or no changes"
          git add data/adjusted/pitchers_away.csv || echo "away pitcher file not found or no changes"
          # --- End NEW ---
          git add summaries/summary.txt || echo "summary not found"

          echo "📄 Git status:"
          git status

          git commit -m "Commit processed data + summary $(TZ='America/New_York' date +"%Y-%m-%d %H:%M:%S")" || echo "Nothing to commit"
          git push --force || echo "Nothing to push"
