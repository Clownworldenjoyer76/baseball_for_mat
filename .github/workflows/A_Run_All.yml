name: A_Run_All

on:
  workflow_dispatch:

env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

permissions:
  contents: write

jobs:
  A_Run_All:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt unidecode

      - name: Run All Scripts + Unified Logs
        run: |
          mkdir -p summaries
          STATUS_FILE="summaries/status.txt"
          LOG_FILE="summaries/log.txt"
          ERRORS_FILE="summaries/errors.txt"
          SUMMARY_FILE="summaries/summary.txt"
          : > "$STATUS_FILE"; : > "$LOG_FILE"; : > "$ERRORS_FILE"; : > "$SUMMARY_FILE"

          mkdir -p data/temp_inputs
          cp -f data/cleaned/batters_today.csv                data/temp_inputs/batters_today_copy.csv || true
          cp -f data/raw/todaysgames_normalized.csv           data/temp_inputs/todaysgames_normalized_copy.csv || true
          cp -f data/cleaned/pitchers_normalized_cleaned.csv  data/temp_inputs/pitchers_normalized_cleaned_copy.csv || true

          run_step() {
            SCRIPT="$1"
            STEP_NAME=$(basename "$SCRIPT" .py)
            STEP_TIMESTAMP=$(TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z")
            echo "▶️ START: $STEP_NAME ($STEP_TIMESTAMP)" >> "$LOG_FILE"

            if [[ "$SCRIPT" == "splitaway.py" ]]; then
              CMD=(python "scripts/${SCRIPT}"                 "data/temp_inputs/batters_today_copy.csv"                 "data/temp_inputs/todaysgames_normalized_copy.csv"                 "data/adjusted/batters_away.csv")
            elif [[ "$SCRIPT" == "splithome.py" ]]; then
              CMD=(python "scripts/${SCRIPT}"                 "data/temp_inputs/batters_today_copy.csv"                 "data/temp_inputs/todaysgames_normalized_copy.csv"                 "data/adjusted/batters_home.csv")
            elif [[ "$SCRIPT" == "normalize_pitcher_home_away.py" ]]; then
              CMD=(python "scripts/${SCRIPT}"                 "data/temp_inputs/pitchers_normalized_cleaned_copy.csv"                 "data/temp_inputs/todaysgames_normalized_copy.csv"                 "data/adjusted/pitchers_home.csv"                 "data/adjusted/pitchers_away.csv")
            elif [[ "$SCRIPT" == "attach_pitcher_ids.py" ]]; then
              CMD=(python "scripts/${SCRIPT}" --games "data/end_chain/cleaned/games_today_cleaned.csv")
            elif [[ "$SCRIPT" == "project_final_score.py" ]]; then
              CMD=(python "scripts/${SCRIPT}" --games "data/end_chain/cleaned/games_today_cleaned.csv")
            else
              CMD=(python "scripts/${SCRIPT}")
            fi

            if "${CMD[@]}" >> "$LOG_FILE" 2> temp_error.log; then
              echo "✅ $STEP_NAME succeeded [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
            else
              echo "❌ $STEP_NAME failed [$STEP_TIMESTAMP]" >> "$STATUS_FILE"
              echo "❌ $STEP_NAME ERROR ($STEP_TIMESTAMP):" >> "$ERRORS_FILE"
              cat temp_error.log >> "$ERRORS_FILE"
              echo -e "\n---\n" >> "$ERRORS_FILE"
            fi

            echo "⏹️ END: $STEP_NAME ($STEP_TIMESTAMP)" >> "$LOG_FILE"
            echo "" >> "$LOG_FILE"
          }

          run_step normalize_names.py
          run_step tag_master_files.py
          run_step validate_tagged_players.py
          run_step deduplicate_normalized.py
          run_step normalize_lineups.py
          run_step normalize_todays_games.py
          run_step refresh_stadium_metadata.py
          run_step apply_team_name_mapping.py

          python - <<'PY' || true
import pandas as pd
from pathlib import Path
p = Path("data/raw/todaysgames_normalized.csv")
if p.exists():
    df = pd.read_csv(p)
    for col in ("home_team","away_team"):
        if col in df.columns:
            df[col] = df[col].astype(str).replace({
                "AZ":"Diamondbacks","Az":"Diamondbacks","az":"Diamondbacks",
                "CWS":"WhiteSox","Cws":"WhiteSox","cws":"WhiteSox"
            })
    df.to_csv(p, index=False)
PY

          run_step update_game_time.py
          run_step filter_stadium_metadata.py
          run_step normalize_batter_team_names.py
          run_step splitaway.py
          run_step splithome.py
          run_step updatesplitcsvs.py
          run_step commit_split_batters.py
          run_step normalize_pitcher_home_away.py
          run_step pitcherfilecleanup.py
          run_step generate_weather_csv.py
          run_step lineupcleaned.py
          run_step filter_today_batters.py
          run_step get_weather_data.py
          run_step weather_data_fix.py
          run_step apply_weather_adjustment.py
          run_step apply_park_adjustment.py
          run_step combine_weather_park_home.py
          run_step combine_weather_park_away.py
          run_step normalize_pitcher_weather_outputs.py
          run_step fix_away_team_column.py
          run_step preprocess_pitcher_weather_park_away.py
          run_step add_team_alias_columns.py
          run_step add_team_columns_to_weather.py
          run_step apply_pitcher_weather_adjustment.py
          run_step apply_pitcher_park_adjustment.py
          run_step normalize_pitcher_merge_inputs.py
          run_step combine_pitcher_weather_park_home.py
          run_step combine_pitcher_weather_park_away.py
          run_step prep_merge.py
          run_step clean_and_preprocess_games.py
          run_step attach_pitcher_ids.py
          run_step normalize_pitchers_xtra.py
          run_step clean_merge_files.py
          run_step clean_and_preprocess_batters.py
          run_step enrich_batters_away.py
          run_step cleanup_enriched_batters_away.py
          run_step finalbatawp.py
          run_step finalbathwp.py
          run_step bat_1.py
          run_step bat_2.py
          run_step bat_away3.py
          run_step bat_home3.py
          run_step bat4.py
          run_step woba_calc.py
          run_step pit1.py
          run_step pit2.py
          run_step end_prep.py
          run_step pit3.py
          run_step normalize_batters_projection_columns.py
          run_step bat5.py
          run_step project_prep.py
          run_step fix_missing_batter_stats.py
          run_step normalize_batters_for_builder.py
          run_step align_weather_team_keys.py
          run_step project_batter_props.py
          run_step project_pitcher_props.py
          run_step build_expanded_batter_props.py
          run_step pitcher_mega_z.py
          run_step project_final_score.py

          {
            echo "===== RUN TIMESTAMP: $(TZ='America/New_York' date +"%Y-%m-%d %I:%M:%S %p %Z") ====="
            echo ""
            echo "===== STATUS ====="
            cat "$STATUS_FILE"
            echo ""
            echo "===== LOG ====="
            cat "$LOG_FILE"
            echo ""
            echo "===== ERRORS ====="
            cat "$ERRORS_FILE"
          } > "$SUMMARY_FILE"

      - name: Commit pitchers_xtra.csv
        run: |
          git add data/end_chain/pitchers_xtra.csv || echo "pitchers_xtra.csv not found or no changes"
          git commit -m "Update pitchers_xtra.csv" || echo "Nothing to commit"
          git push --force || echo "Nothing to push"

      - name: Commit all output files
        run: |
          git add data/adjusted/*.csv || echo "No adjusted files changed"
          git add data/end_chain/**/*.csv || echo "No end_chain files changed"
          git add data/_projections/*.csv || echo "No projections files changed"
          git add summaries/summary.txt || echo "summary not found"
          git commit -m "Commit processed data + summary $(TZ='America/New_York' date +"%Y-%m-%d %H:%M:%S")" || echo "Nothing to commit"
          git push --force || echo "Nothing to push"
