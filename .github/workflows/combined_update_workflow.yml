# .github/workflows/combined_update_workflow.yml

name: Second Update Lineups and Todays Games CSVs

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Start Chain - Fetch Rosters"]  # ← runs right after fetch_rosters.yml completes
    types: [completed]
    branches: [main]

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
          ref: main

      - name: Show repo/branch/remote
        run: |
          echo "Repo: ${{ github.repository }}"
          echo "Ref : ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          git rev-parse --abbrev-ref HEAD
          git remote -v
          pwd && ls -la

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas requests
          fi

      - name: Run with unified logs and commits → summaries/todaysgames
        shell: bash
        run: |
          set +e

          mkdir -p summaries/todaysgames data/raw
          STATUS_FILE="summaries/todaysgames/status.txt"
          LOG_FILE="summaries/todaysgames/log.txt"
          ERR_FILE="summaries/todaysgames/errors.txt"
          SUMMARY_FILE="summaries/todaysgames/summary.txt"
          : > "$STATUS_FILE"; : > "$LOG_FILE"; : > "$ERR_FILE"; : > "$SUMMARY_FILE"

          ts() { TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z"; }

          run_step() {
            local NAME="$1"; shift
            local CMD=("$@")
            echo "▶️ START: ${NAME} ($(ts))" | tee -a "$LOG_FILE"
            echo "::group::${NAME}"
            "${CMD[@]}" >> "$LOG_FILE" 2> step.err
            local RC=$?
            echo "::endgroup::"
            if [ $RC -eq 0 ]; then
              echo "✅ ${NAME} succeeded [$(ts)]" | tee -a "$STATUS_FILE"
            else
              echo "❌ ${NAME} failed [$(ts)]" | tee -a "$STATUS_FILE"
              {
                echo "❌ ${NAME} ERROR [$(ts)]:"
                cat step.err
                echo ""
                echo "---"
                echo ""
              } >> "$ERR_FILE"
            fi
            rm -f step.err
            echo "⏹️ END: ${NAME} ($(ts))" | tee -a "$LOG_FILE"
            echo "" >> "$LOG_FILE"
            return $RC
          }

          git_cfg() {
            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
          }

          # ---------- LINEUPS ----------
          run_step "scripts/todayslineups.py" python -u scripts/todayslineups.py
          run_step "scripts/lineups_fix.py"   python -u scripts/lineups_fix.py

          echo "CSV preview (lineups):" >> "$LOG_FILE"
          head -n 5 data/raw/lineups.csv >> "$LOG_FILE" 2>/dev/null || true
          wc -c data/raw/lineups.csv >> "$LOG_FILE" 2>/dev/null || true

          git_cfg
          git add data/raw/lineups.csv
          if git diff --cached --quiet; then
            echo "No changes to data/raw/lineups.csv; skipping commit." >> "$LOG_FILE"
          else
            if git commit -m "Update lineups.csv"; then
              echo "Committed lineups.csv at $(git rev-parse HEAD)" >> "$LOG_FILE"
              git pull --rebase origin main || true
              git push origin HEAD:main || echo "Push failed" >> "$ERR_FILE"
            else
              echo "Commit failed for lineups.csv" >> "$ERR_FILE"
            fi
          fi

          # ---------- TODAYS GAMES ----------
          run_step "scripts/todaysgames.py" python -u scripts/todaysgames.py --out data/raw/todaysgames.csv

          echo "CSV preview (todaysgames):" >> "$LOG_FILE"
          head -n 5 data/raw/todaysgames.csv >> "$LOG_FILE" 2>/dev/null || true
          wc -c data/raw/todaysgames.csv >> "$LOG_FILE" 2>/dev/null || true

          git_cfg
          git add --force data/raw/todaysgames.csv
          if git diff --cached --quiet; then
            git commit --allow-empty -m "Keep data/raw/todaysgames.csv (no content change) [run $GITHUB_RUN_ID]" >> "$LOG_FILE" 2>>"$ERR_FILE"
          else
            git commit -m "Update data/raw/todaysgames.csv [run $GITHUB_RUN_ID]" >> "$LOG_FILE" 2>>"$ERR_FILE"
          fi
          git pull --rebase origin main || true
          git push origin HEAD:main || echo "Push failed" >> "$ERR_FILE"

          # ---------- ENRICH PITCHERS WITH OPPONENT CONTEXT ----------
          GAME_DATE="$(date +%F)"
          run_step "scripts/enrich_pitchers_with_opp.py" python -u scripts/enrich_pitchers_with_opp.py \
            --infile data/end_chain/final/startingpitchers_final.csv \
            --date "${GAME_DATE}" \
            --outfile data/raw/startingpitchers_with_opp_context.csv

          echo "CSV preview (startingpitchers_with_opp_context):" >> "$LOG_FILE"
          head -n 5 data/raw/startingpitchers_with_opp_context.csv >> "$LOG_FILE" 2>/dev/null || true
          wc -c data/raw/startingpitchers_with_opp_context.csv >> "$LOG_FILE" 2>/dev/null || true

          git_cfg
          git add --force data/raw/startingpitchers_with_opp_context.csv
          git commit --allow-empty -m "Update data/raw/startingpitchers_with_opp_context.csv [run $GITHUB_RUN_ID]" >> "$LOG_FILE" 2>>"$ERR_FILE"
          git pull --rebase origin main || true
          git push origin HEAD:main || echo "Push failed" >> "$ERR_FILE"

          # ---------- WRITE SUMMARY ----------
          {
            echo "===== RUN TIMESTAMP: $(ts) ====="
            echo ""
            echo "===== STATUS ====="
            cat "$STATUS_FILE"
            echo ""
            echo "===== LOG ====="
            cat "$LOG_FILE"
            echo ""
            echo "===== ERRORS ====="
            cat "$ERR_FILE"
          } > "$SUMMARY_FILE"

          # ---------- COMMIT SUMMARIES ----------
          git_cfg
          git add summaries/todaysgames/*.txt
          if git diff --cached --quiet; then
            echo "No changes to summaries/todaysgames; skipping commit." >> "$LOG_FILE"
          else
            git commit -m "Update summaries/todaysgames [run $GITHUB_RUN_ID]" >> "$LOG_FILE" 2>>"$ERR_FILE"
            git pull --rebase origin main || true
            git push origin HEAD:main || echo "Push failed" >> "$ERR_FILE"
          fi

      - name: Upload summaries/todaysgames artifact
        uses: actions/upload-artifact@v4
        with:
          name: todaysgames_summaries
          path: summaries/todaysgames/
          if-no-files-found: warn
