# .github/workflows/pipeline-projections.yml
name: "Pipeline Projections (06–07)"

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Pipeline Prep (00–05)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: pipeline-projections-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: "06 Projection and Builder"
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PYTHONUNBUFFERED: '1'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, ref: main }

      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - name: Reset summaries
        run: |
          rm -rf summaries/06_projection
          mkdir -p summaries/06_projection

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run 06 pipeline
        run: |
          set -e
          STAGE="summaries/06_projection"
          STATUS="$STAGE/status.txt"; : > "$STATUS"

          run_py () {
            local file="$1"
            local name="$(basename "$file")"
            local ts="$(date '+%Y-%m-%d %H:%M:%S %Z')"
            local log="$STAGE/${name}.log"
            local script_path="scripts/${name}"

            if [ ! -f "$script_path" ]; then
              echo ">> START: ${name} (${ts})" > "$log"
              echo "SKIP: ${script_path} not found" | tee -a "$log"
              echo "[OK] ${name} skipped (missing) [${ts}]" >> "$STATUS"
              echo "[END] ${name} (${ts})" | tee -a "$log"
              return 0
            fi

            echo ">> START: ${name} (${ts})" > "$log"
            set +e
            python "$script_path" |& tee -a "$log"
            code=${PIPESTATUS[0]}
            set -e
            if [ $code -eq 0 ]; then
              echo "[OK] ${name} succeeded [${ts}]" >> "$STATUS"
            else
              echo "[FAIL] ${name} failed [${ts}]" >> "$STATUS"
            fi
            echo "[END] ${name} (${ts})" | tee -a "$log"
            return $code
          }

          # ---- 06 order (updated) ----
          run_py fix_outputs_generate_fixed_files.py || true
          run_py normalize_inputs_for_06.py || true

          # NEW: ensure TGN has pitcher_*_id freshly injected
          run_py inject_pitcher_ids_into_games.py || true

          # NEW: rebuild starters file from today’s slate (+ fallbacks & missing ledger)
          run_py rebuild_startingpitchers.py || true

          # moved AFTER rebuild so it enriches a fresh starters file
          run_py project_prep.py || true

          run_py fix_missing_batter_stats.py || true
          run_py normalize_batters_for_builder.py || true
          run_py project_batter_props.py || true
          run_py project_pitcher_props.py || true

          # enforce mid-pipeline
          run_py ensure_pitcher_props_schema.py || true
          run_py inject_pitcher_context.py || true
          run_py inject_pitcher_context_from_tgn.py || true
          run_py build_expanded_batter_props.py || true
          run_py pitcher_mega_z.py || true
          run_py starter_coverage_guard.py || true
          run_py post_normalize_pitchers.py || true
          run_py finalize_projections.py || true
          run_py clean_inject_team_ids.py || true
          run_py inject_game_ids_from_schedule.py || true
          run_py inject_batter_woba_adjustments.py || true
          run_py clean_pitcher_files.py || true
          run_py impute_missing_batter_adj_woba.py || true
          # enforce again at the end
          run_py ensure_pitcher_props_schema.py || true

      - name: Assert starters coverage (quick guard)
        run: |
          set -euo pipefail
          csv="data/raw/startingpitchers_with_opp_context.csv"
          if [ ! -s "$csv" ]; then
            echo "missing $csv"; exit 1
          fi
          # no missing player_id rows
          miss=$(awk -F, 'NR==1{for(i=1;i<=NF;i++)if($i=="player_id")c=i;next} $c==""{n++} END{print n+0}' "$csv")
          if [ "$miss" -gt 0 ]; then
            echo "ERROR: $miss starter rows missing player_id" | tee -a summaries/06_projection/coverage_check.txt
            exit 1
          fi
          # exactly 2 rows per game_id
          python - << 'PY'
import csv, sys, collections
from pathlib import Path
p=Path("data/raw/startingpitchers_with_opp_context.csv")
counts=collections.Counter()
with p.open() as f:
    r=csv.DictReader(f)
    for row in r:
        counts[row.get("game_id","").strip()]+=1
bad=[(gid,c) for gid,c in counts.items() if gid and c!=2]
if bad:
    Path("summaries/06_projection/coverage_check.txt").write_text(
        "Bad game_id row counts (expected 2):\n"+"\n".join(f"{gid}: {c}" for gid,c in bad)
    )
    sys.exit(1)
PY

      - name: Commit & push 06 outputs
        if: always()
        run: |
          set -euo pipefail
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          git add \
            data/_projections/*.csv \
            data/end_chain/final/*.csv \
            data/raw/*.csv \
            tools/missing_pitcher_id.csv \
            summaries/06_projection/*.log \
            summaries/06_projection/status.txt 2>/dev/null || true

          git commit -m "06 Projection: commit generated outputs and logs" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push || echo "No changes to push"

      - name: Write & push 06 summary
        if: always()
        run: |
          set -euo pipefail
          STAGE="summaries/06_projection"
          SUMMARY="$STAGE/summary.txt"
          STATUS="$STAGE/status.txt"

          {
            echo "===== RUN TIMESTAMP: $(date '+%Y-%m-%d %H:%M:%S %Z') ====="
            echo
            echo "===== STATUS (per script) ====="
            if [ -s "$STATUS" ]; then cat "$STATUS"; else echo "(status.txt not generated)"; fi
            echo
            echo "===== LOGS: LAST 20 LINES OF ALL SCRIPT LOGS (current run) ====="
            for LOGF in "$STAGE"/*.log; do
              [ -f "$LOGF" ] || continue
              echo "---- $(basename "$LOGF") ----"
              tail -n 20 "$LOGF"
              echo
            done
          } > "$SUMMARY"

          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add "$SUMMARY"
          git commit -m "06 Projection: overwrite summary.txt [skip ci]" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push || echo "No changes to push"
