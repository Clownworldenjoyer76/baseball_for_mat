# .github/workflows/pipeline-projections.yml
name: "Pipeline Projections (06–07)"

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Pipeline Prep (00–05)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: pipeline-projections-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: "06 Projection and Builder"
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PYTHONUNBUFFERED: '1'
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, ref: main }

      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - name: Reset summaries (06)
        run: |
          rm -rf summaries/06_projection
          mkdir -p summaries/06_projection

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Preflight: show key headers exist
        shell: bash
        run: |
          set -euo pipefail
          echo ">> HEADERS (todaysgames_normalized)"
          (head -n1 data/raw/todaysgames_normalized.csv || true)
          echo ">> HEADERS (startingpitchers_with_opp_context)"
          (head -n1 data/raw/startingpitchers_with_opp_context.csv || true)
          echo ">> HEADERS (pitchers_normalized_cleaned)"
          (head -n1 data/cleaned/pitchers_normalized_cleaned.csv || true)

      - name: Run 06 pipeline
        shell: bash
        run: |
          set -e
          STAGE="summaries/06_projection"
          STATUS="$STAGE/status.txt"; : > "$STATUS"

          run_py () {
            local file="$1"
            local name="$(basename "$file")"
            local ts="$(date '+%Y-%m-%d %H:%M:%S %Z')"
            local log="$STAGE/${name}.log"
            local script_path="scripts/${name}"

            if [ ! -f "$script_path" ]; then
              echo ">> START: ${name} (${ts})" > "$log"
              echo "SKIP: ${script_path} not found" | tee -a "$log"
              echo "[OK] ${name} skipped (missing) [${ts}]" >> "$STATUS"
              echo "[END] ${name} (${ts})" | tee -a "$log"
              return 0
            fi

            echo ">> START: ${name} (${ts})" > "$log"
            set +e
            python "$script_path" |& tee -a "$log"
            code=${PIPESTATUS[0]}
            set -e
            if [ $code -eq 0 ]; then
              echo "[OK] ${name} succeeded [${ts}]" >> "$STATUS"
            else
              echo "[FAIL] ${name} failed [${ts}]" >> "$STATUS"
            fi
            echo "[END] ${name} (${ts})" | tee -a "$log"
            return $code
          }

          # ---- 06 order ----
          run_py fix_outputs_generate_fixed_files.py || true
          run_py normalize_inputs_for_06.py || true
          run_py project_prep.py || true
          run_py fix_missing_batter_stats.py || true
          run_py normalize_batters_for_builder.py || true
          run_py project_batter_props.py || true
          run_py project_pitcher_props.py || true
          # enforce mid-pipeline
          run_py ensure_pitcher_props_schema.py || true
          run_py inject_pitcher_context.py || true
          run_py inject_pitcher_context_from_tgn.py || true
          run_py build_expanded_batter_props.py || true
          run_py pitcher_mega_z.py || true
          run_py starter_coverage_guard.py || true
          run_py post_normalize_pitchers.py || true
          run_py finalize_projections.py || true
          run_py clean_inject_team_ids.py || true
          run_py inject_game_ids_from_schedule.py || true
          run_py inject_batter_woba_adjustments.py || true
          run_py clean_pitcher_files.py || true
          # enforce again at the end (after possible mutations)
          run_py ensure_pitcher_props_schema.py || true
          run_py impute_missing_batter_adj_woba.py || true

      - name: Commit & push 06 outputs + authoritative CSVs
        if: always()
        run: |
          set -euo pipefail
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          git add \
            data/_projections/*.csv \
            data/end_chain/final/*.csv \
            data/raw/todaysgames_normalized.csv \
            data/raw/startingpitchers_with_opp_context.csv \
            summaries/06_projection/*.log \
            summaries/06_projection/status.txt 2>/dev/null || true

          git commit -m "06 Projection: commit generated outputs and logs" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push || echo "No changes to push"

      - name: Write & push 06 summary
        if: always()
        run: |
          set -euo pipefail
          STAGE="summaries/06_projection"
          SUMMARY="$STAGE/summary.txt"
          STATUS="$STAGE/status.txt"
          CLEAN_LOG="$STAGE/clean_pitcher_files.py.log"

          {
            echo "===== RUN TIMESTAMP: $(date '+%Y-%m-%d %H:%M:%S %Z') ====="
            echo
            echo "===== STATUS (per script) ====="
            if [ -s "$STATUS" ]; then
              cat "$STATUS"
            else
              echo "(status.txt not generated)"
            fi
            echo
            echo "===== KEY COUNTS ====="
            if [ -f "$CLEAN_LOG" ]; then
              starters_line=$(grep -E 'Starters seen today:' "$CLEAN_LOG" | tail -n 1 || true)
              if [ -n "$starters_line" ]; then
                starters=$(echo "$starters_line" | awk -F': ' '{print $2}')
                echo "starters_today: ${starters}"
              else
                echo "starters_today: (not found)"
              fi
            else
              echo "starters_today: (clean_pitcher_files.py.log not found)"
            fi
            echo
            echo "===== LOGS: LAST 20 LINES OF ALL SCRIPT LOGS (current run) ====="
            for LOGF in "$STAGE"/*.log; do
              [ -f "$LOGF" ] || continue
              echo "---- $(basename "$LOGF") ----"
              tail -n 20 "$LOGF"
              echo
            done
          } > "$SUMMARY"

          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add "$SUMMARY"
          git commit -m "06 Projection: overwrite summary.txt [skip ci]" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push || echo "No changes to push"

  final_projections:
    name: "07 Final Projections"
    needs: [build]
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PYTHONUNBUFFERED: '1'
    steps:
      - uses: actions/checkout@v4
        with: { ref: main, fetch-depth: 0 }

      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Reset summaries (07)
        run: |
          rm -rf summaries/07_final
          mkdir -p summaries/07_final
          : > summaries/07_final/prep_daily_log.txt
          : > summaries/07_final/batter_log.txt
          : > summaries/07_final/pitcher_log.txt
          : > summaries/07_final/game_scores_log.txt
          : > summaries/07_final/summary.txt

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          mkdir -p data/_projections data/end_chain/final

      - name: Enforce pitcher props schema (pre-07)
        run: |
          set -euo pipefail
          python scripts/ensure_pitcher_props_schema.py
          echo "HEADERS:"
          (head -n1 data/_projections/pitcher_props_projected_final.csv || true)

      - name: Prep daily projection inputs
        run: |
          set -euo pipefail
          python scripts/prepare_daily_projection_inputs.py | tee -a summaries/07_final/prep_daily_log.txt

      - name: Batter event probabilities
        run: |
          set -euo pipefail
          python scripts/project_batter_event_probabilities.py | tee -a summaries/07_final/batter_log.txt

      - name: Pitcher event probabilities
        run: |
          set -euo pipefail
          python scripts/project_pitcher_event_probabilities.py | tee -a summaries/07_final/pitcher_log.txt

      - name: Game score projections
        run: |
          set -euo pipefail
          rm -f summaries/07_final/gamescores_bad_games.txt || true
          python scripts/project_game_scores.py | tee -a summaries/07_final/game_scores_log.txt

      - name: Summarize run (07)
        run: |
          set -euo pipefail
          {
            echo "===== RUN TIMESTAMP: $(date '+%Y-%m-%d %H:%M:%S %Z') ====="
            echo ""
            echo "===== LOG TAILS ====="
            for f in prep_daily_log.txt batter_log.txt pitcher_log.txt game_scores_log.txt; do
              echo "--- ${f%.*} (tail) ---"
              if [ -f "summaries/07_final/$f" ]; then
                tail -n 25 "summaries/07_final/$f"
              else
                echo "(missing)"
              fi
              echo ""
            done
            echo "===== ERROR GREP (from current logs) ====="
            if grep -RniE "error|fail|assert|Slate mismatch|Duplicate .*pairs" summaries/07_final | grep -v summary.txt; then
              echo "(errors found)"; exit_code=1
            else
              echo "(no fatal errors found by grep)"; exit_code=0
            fi
            if [ -s "summaries/07_final/gamescores_bad_games.txt" ]; then
              echo "(warning: bad_games present; incomplete games were dropped)"
            fi
            exit $exit_code
          } > summaries/07_final/summary.txt

      - name: Sweep stray root logs into summaries/07_final
        run: |
          shopt -s nullglob
          mkdir -p summaries/07_final
          for f in log_*.txt *.log; do
            [ -f "$f" ] && mv "$f" "summaries/07_final/" || true
          done

      - name: Commit CSVs + summaries (07)
        if: always()
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add data/end_chain/final/game_score_projections.csv 2>/dev/null || true
          git add data/end_chain/final/batter_event_probabilities.csv 2>/dev/null || true
          git add data/end_chain/final/pitcher_event_probabilities.csv 2>/dev/null || true
          git add data/_projections/batter_event_probabilities.csv 2>/dev/null || true
          git add data/_projections/pitcher_event_probabilities.csv 2>/dev/null || true
          git add data/_projections/batter_props_projected_final.csv 2>/dev/null || true
          git add data/_projections/batter_props_expanded_final.csv 2>/dev/null || true
          git add data/raw/todaysgames_normalized.csv 2>/dev/null || true
          git add data/raw/startingpitchers_with_opp_context.csv 2>/dev/null || true
          git add summaries/07_final/* 2>/dev/null || true

          if ! git diff --cached --quiet; then
            git commit -m "CI: update final projections and summaries/07_final [$(date -u +'%Y-%m-%dT%H:%M:%SZ')]"
            git pull --rebase origin main || true
            git push origin HEAD:main || true
          else
            echo "No changes to commit."
          fi

  workflow_summary:
    name: "Write overall workflow summary (06–07)"
    needs: [final_projections]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { ref: main, fetch-depth: 0 }

      - name: Build pipeline-level summary file
        run: |
          set -euo pipefail
          mkdir -p summaries
          OUT="summaries/pipeline-projections_summary.txt"
          {
            echo "===== WORKFLOW: Pipeline Projections (06–07) ====="
            echo "generated_at: $(date '+%Y-%m-%d %H:%M:%S %Z')"
            echo

            echo "== 06 Projection Status =="
            if [ -f summaries/06_projection/status.txt ]; then
              cat summaries/06_projection/status.txt
            else
              echo "(missing: summaries/06_projection/status.txt)"
            fi
            echo

            echo "== 06 Notable Counts =="
            if [ -f summaries/06_projection/clean_pitcher_files.py.log ]; then
              starters_line=$(grep -E 'Starters seen today:' summaries/06_projection/clean_pitcher_files.py.log | tail -n 1 || true)
              if [ -n "$starters_line" ]; then
                echo "Starters seen today: ${starters_line##*: }"
              else
                echo "Starters seen today: (not found)"
              fi
            else
              echo "Starters seen today: (log not found)"
            fi
            echo

            echo "== 06 Failures (if any) =="
            if [ -f summaries/06_projection/status.txt ]; then
              grep "FAIL" -n summaries/06_projection/status.txt || echo "(none)"
            else
              echo "(status.txt missing)"
            fi
            echo

            echo "== 07 Log Tails =="
            for f in prep_daily_log.txt batter_log.txt pitcher_log.txt game_scores_log.txt; do
              echo "--- ${f%.*} tail ---"
              if [ -f "summaries/07_final/$f" ]; then
                tail -n 25 "summaries/07_final/$f"
              else
                echo "(missing)"
              fi
              echo
            done

            echo "== 07 Errors/BAD GAMES =="
            if [ -f summaries/07_final/gamescores_bad_games.txt ]; then
              cat summaries/07_final/gamescores_bad_games.txt
            else
              echo "(no bad_games log found)"
            fi
          } > "$OUT"

      - name: Commit workflow-level summary
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add summaries/pipeline-projections_summary.txt
          git commit -m "Projections: write pipeline-projections_summary.txt" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push origin HEAD:main || true
