---
name: Pipeline Prep (00-05)
on:
  workflow_dispatch: {}
permissions:
  contents: write
concurrency:
  group: pipeline-prep-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash
jobs:
  fetch_normalize:
    name: 00 Fetch & Normalize
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Reset summaries
        run: |
          rm -rf summaries/foundation
          mkdir -p summaries/foundation

      - name: Run stage with unified logs
        run: |
          set +e

          STAGE="summaries/foundation"
          STATUS="$STAGE/status.txt"
          LOG="$STAGE/log.txt"
          ERR="$STAGE/errors.txt"
          SUM="$STAGE/summary.txt"
          : >"$STATUS"; : >"$LOG"; : >"$ERR"; : >"$SUM"

          ts(){ TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z"; }

          run_step(){
            local step="$1"; shift
            echo "▶️ START: ${step} ($(ts))" >>"$LOG"
            "$@" >>"$LOG" 2>step.err
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "✅ ${step} succeeded [$(ts)]" >>"$STATUS"
            else
              echo "❌ ${step} failed [$(ts)]" >>"$STATUS"
              { echo "❌ ${step} ERROR [$(ts)]:"
                cat step.err
                echo; echo '---'; echo; } >>"$ERR"
            fi
            rm -f step.err
            echo "⏹️ END: ${step} ($(ts))" >>"$LOG"
            echo >>"$LOG"
          }

          run_step normalize_names.py                  python scripts/normalize_names.py
          run_step tag_master_files.py                 python scripts/tag_master_files.py
          run_step validate_tagged_players.py          python scripts/validate_tagged_players.py
          run_step deduplicate_normalized.py           python scripts/deduplicate_normalized.py
          run_step normalize_lineups.py                python scripts/normalize_lineups.py

          # Generate raw games list before normalizing it
          run_step todaysgames.py                      python scripts/todaysgames.py
          run_step normalize_todays_games.py           python scripts/normalize_todays_games.py
          run_step inject_pitcher_ids_into_games.py    python scripts/inject_pitcher_ids_into_games.py
          run_step apply_team_name_mapping.py          python scripts/apply_team_name_mapping.py
          run_step fetch_mlb_ids.py                    python scripts/fetch_mlb_ids.py
          run_step hotfix_team_codes.py                python scripts/hotfix_team_codes.py
          run_step update_game_time.py                 python scripts/update_game_time.py
          run_step finalize_todaysgames_types_and_pf.py  python scripts/finalize_todaysgames_types_and_pf.py

          run_step filter_stadium_metadata.py          python scripts/filter_stadium_metadata.py
          run_step normalize_batter_team_names.py      python scripts/normalize_batter_team_names.py
          run_step build_batters_today_from_lineups.py python scripts/build_batters_today_from_lineups.py

          # Provide required --game-date to post_normalize_fixups.py
          GAME_DATE="$(TZ='America/New_York' date +%Y-%m-%d)"
          echo "Using GAME_DATE=${GAME_DATE}" >>"$LOG"
          run_step post_normalize_fixups.py            python scripts/post_normalize_fixups.py \
                                                       --games data/raw/todaysgames_normalized.csv \
                                                       --batters data/cleaned/batters_today.csv \
                                                       --pitchers data/cleaned/pitchers_normalized_cleaned.csv \
                                                       --game-date "${GAME_DATE}"

          run_step fix_inputs_inject_stolen_base_pct.py  python scripts/fix_inputs_inject_stolen_base_pct.py

          {
            echo "===== RUN TIMESTAMP: $(ts) ====="
            echo
            echo "===== STATUS =====";  cat "$STATUS"
            echo; echo "===== LOG =====";   cat "$LOG"
            echo; echo "===== ERRORS =====";cat "$ERR"
          } > "$SUM"

      - name: Sweep stray root logs into summaries/foundation
        run: |
          shopt -s nullglob
          mkdir -p summaries/foundation
          for f in log_*.txt *.log; do
            [ -f "$f" ] && mv "$f" "summaries/foundation/" || true
          done

      - name: Commit outputs
        run: |
          set -euo pipefail
          TARGET_BRANCH="${GITHUB_REF_NAME:-${GITHUB_HEAD_REF:-main}}"

          echo "TARGET_BRANCH=${TARGET_BRANCH}"

          echo "--- DIR LISTS ---"
          ls -l data/raw || true
          ls -l data/cleaned || true
          ls -l summaries/foundation || true

          git add data/raw/todaysgames.csv 2>/dev/null || true
          git add data/raw/todaysgames_normalized.csv 2>/dev/null || true
          git add data/raw/lineups_normalized.csv 2>/dev/null || true
          git add data/cleaned/batters_today.csv 2>/dev/null || true
          git add data/cleaned/pitchers_normalized_cleaned.csv 2>/dev/null || true
          git add summaries/foundation/* 2>/dev/null || true

          echo "--- GIT STATUS AFTER ADD ---"
          git status -s

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "00 foundation outputs"
          echo "git push --force-with-lease origin HEAD:${TARGET_BRANCH}"
          git push --force-with-lease origin HEAD:"${TARGET_BRANCH}"

  split_sched:
    name: 01 Split & Schedule
    needs:
      - fetch_normalize
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Reset summaries
        run: |
          rm -rf summaries/split_sched
          mkdir -p summaries/split_sched data/temp_inputs data/adjusted data/bets data/_projections

      - name: Run stage with unified logs
        run: |
          set +e

          STAGE="summaries/split_sched"
          STATUS="$STAGE/status.txt"
          LOG="$STAGE/log.txt"
          ERR="$STAGE/errors.txt"
          SUM="$STAGE/summary.txt"
          : >"$STATUS"; : >"$LOG"; : >"$ERR"; : >"$SUM"

          ts(){ TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z"; }

          run_step(){
            local step_name="$1"; shift
            echo "START: ${step_name} ($(ts))" >>"$LOG"
            "$@" >>"$LOG" 2>step.err
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "OK   ${step_name} [$(ts)]" >>"$STATUS"
            else
              echo "FAIL ${step_name} [$(ts)]" >>"$STATUS"
              { echo "ERROR ${step_name} [$(ts)]:"
                cat step.err
                echo; echo '---'; echo; } >>"$ERR"
            fi
            rm -f step.err
            echo "END  : ${step_name} ($(ts))" >>"$LOG"
            echo >>"$LOG"
          }

          # Stage inputs for downstream processing/scheduling
          run_step copy_inputs_batters.py               cp -f data/cleaned/batters_today.csv               data/temp_inputs/batters_today_copy.csv
          run_step copy_inputs_tgn.py                   cp -f data/raw/todaysgames_normalized.csv          data/temp_inputs/todaysgames_normalized_copy.csv
          run_step copy_inputs_pitchers.py              cp -f data/cleaned/pitchers_normalized_cleaned.csv data/temp_inputs/pitchers_normalized_cleaned_copy.csv
          run_step copy_inputs_lineups.py               cp -f data/raw/lineups_normalized.csv              data/temp_inputs/lineups_normalized_copy.csv

          # Emit file 06 expects: todaysgames_normalized_fixed.csv
          run_step emit_tgn_fixed.sh                    bash -lc 'cp -f data/temp_inputs/todaysgames_normalized_copy.csv data/_projections/todaysgames_normalized_fixed.csv && echo "WROTE data/_projections/todaysgames_normalized_fixed.csv"'

          # Optionally run your split/schedule scripts if present
          run_step maybe_split_games_windows.py         bash -lc '[ -f scripts/split_games_windows.py ] && python scripts/split_games_windows.py --in data/temp_inputs/todaysgames_normalized_copy.csv --out data/adjusted || echo "SKIP: scripts/split_games_windows.py not found"'
          run_step maybe_build_bets_schedule.py         bash -lc '[ -f scripts/build_bets_schedule.py ] && python scripts/build_bets_schedule.py --games data/adjusted --out data/bets || echo "SKIP: scripts/build_bets_schedule.py not found"'

          {
            echo "===== RUN TIMESTAMP: $(ts) ====="
            echo
            echo "===== STATUS =====";  cat "$STATUS"
            echo; echo "===== LOG =====";   cat "$LOG"
            echo; echo "===== ERRORS =====";cat "$ERR"
          } > "$SUM"

      - name: Sweep stray root logs into summaries/split_sched
        run: |
          shopt -s nullglob
          mkdir -p summaries/split_sched
          for f in log_*.txt *.log; do
            [ -f "$f" ] && mv "$f" "summaries/split_sched/" || true
          done

      - name: Commit outputs
        run: |
          set -euo pipefail
          TARGET_BRANCH="${GITHUB_REF_NAME:-${GITHUB_HEAD_REF:-main}}"

          echo "TARGET_BRANCH=${TARGET_BRANCH}"

          echo "--- DIR LISTS ---"
          ls -l data/temp_inputs || true
          ls -l data/adjusted || true
          ls -l data/bets || true
          ls -l data/_projections || true
          ls -l summaries/split_sched || true

          git add data/temp_inputs/* 2>/dev/null || true
          git add data/adjusted/* 2>/dev/null || true
          git add data/bets/* 2>/dev/null || true
          git add data/_projections/todaysgames_normalized_fixed.csv 2>/dev/null || true
          git add summaries/split_sched/* 2>/dev/null || true

          echo "--- GIT STATUS AFTER ADD ---"
          git status -s

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "01 split & schedule outputs"
          echo "git push --force-with-lease origin HEAD:${TARGET_BRANCH}"
          git push --force-with-lease origin HEAD:"${TARGET_BRANCH}"

  workflow_summary:
    name: 05 Write pipeline-prep summary
    needs:
      - split_sched
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Build pipeline-prep_summary.txt
        run: |
          mkdir -p summaries
          OUT="summaries/pipeline-prep_summary.txt"
          {
            echo "===== WORKFLOW: Pipeline Prep (00-05) ====="
            echo "generated_at: $(date '+%Y-%m-%d %H:%M:%S %Z')"
            echo
            echo "== foundation =="
            if [ -f summaries/foundation/summary.txt ]; then
              sed -n '1,120p' summaries/foundation/summary.txt
            else
              echo "(missing: summaries/foundation/summary.txt)"
            fi
            echo
            echo "== split_sched =="
            if [ -f summaries/split_sched/summary.txt ]; then
              sed -n '1,120p' summaries/split_sched/summary.txt
            else
              echo "(missing: summaries/split_sched/summary.txt)"
            fi
          } > "$OUT"

      - name: Commit pipeline-prep_summary.txt
        run: |
          set -euo pipefail
          TARGET_BRANCH="${GITHUB_REF_NAME:-${GITHUB_HEAD_REF:-main}}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add summaries/pipeline-prep_summary.txt
          echo "--- GIT STATUS AFTER ADD ---"
          git status -s
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Prep: write pipeline-prep_summary.txt"
            echo "git push --force-with-lease origin HEAD:${TARGET_BRANCH}"
            git push --force-with-lease origin HEAD:"${TARGET_BRANCH}"
          fi
