name: "00 Fetch & Normalize"

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch_normalize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-py-

      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run stage with unified logs
        shell: bash
        run: |
          set +e
          mkdir -p summaries/foundation
          STATUS="summaries/foundation/status.txt"
          LOG="summaries/foundation/log.txt"
          ERR="summaries/foundation/errors.txt"
          SUM="summaries/foundation/summary.txt"
          : >"$STATUS"; : >"$LOG"; : >"$ERR"; : >"$SUM"

          ts(){ TZ="America/New_York" date +"%Y-%m-%d %I:%M:%S %p %Z"; }
          run_step(){ echo "▶️ START: $1 ($(ts))" >>"$LOG"; shift; "$@" >>"$LOG" 2>step.err; rc=$?; if [ $rc -eq 0 ]; then echo "✅ $1 succeeded [$(ts)]" >>"$STATUS"; else echo "❌ $1 failed [$(ts)]" >>"$STATUS"; { echo "❌ $1 ERROR [$(ts)]:"; cat step.err; echo; echo '---'; echo; } >>"$ERR"; fi; rm -f step.err; echo "⏹️ END: $1 ($(ts))" >>"$LOG"; echo >>"$LOG"; }

          run_step normalize_names.py                  python scripts/normalize_names.py
          run_step tag_master_files.py                 python scripts/tag_master_files.py
          run_step validate_tagged_players.py          python scripts/validate_tagged_players.py
          run_step deduplicate_normalized.py           python scripts/deduplicate_normalized.py
          run_step normalize_lineups.py                python scripts/normalize_lineups.py
          run_step normalize_todays_games.py           python scripts/normalize_todays_games.py

          # NEW: inject pitcher IDs after normalize_names + normalize_todays_games
          run_step inject_pitcher_ids_into_games.py    python scripts/inject_pitcher_ids_into_games.py

          # run_step apply_team_name_mapping.py          python scripts/apply_team_name_mapping.py
          run_step fetch_mlb_ids.py                    python scripts/fetch_mlb_ids.py
          # run_step hotfix_team_codes.py                python scripts/hotfix_team_codes.py
          # run_step update_game_time.py                 python scripts/update_game_time.py
          # run_step finalize_todaysgames_types_and_pf.py  python scripts/finalize_todaysgames_types_and_pf.py
          run_step filter_stadium_metadata.py          python scripts/filter_stadium_metadata.py
          run_step normalize_batter_team_names.py      python scripts/normalize_batter_team_names.py
          run_step post_normalize_fixups.py            python scripts/post_normalize_fixups.py --games data/raw/todaysgames_normalized.csv --batters data/cleaned/batters_today.csv --pitchers data/cleaned/pitchers_normalized_cleaned.csv --game-date "$(date -u +%Y%m%d)"
          run_step fix_inputs_inject_stolen_base_pct.py  python scripts/fix_inputs_inject_stolen_base_pct.py

          {
            echo "===== RUN TIMESTAMP: $(ts) ====="
            echo
            echo "===== STATUS =====";  cat "$STATUS"
            echo; echo "===== LOG =====";   cat "$LOG"
            echo; echo "===== ERRORS =====";cat "$ERR"
          } > "$SUM"

      - name: Commit stage outputs
        run: |
          git add data/raw/todaysgames_normalized.csv || true
          git add data/Data/stadium_metadata.csv || true
          git add data/cleaned/batters_today.csv || true
          git add data/cleaned/pitchers_normalized_cleaned.csv || true
          git add summaries/foundation/* || true
          git add summaries/pre_split/* || true
          git diff --cached --quiet || git commit -m "00 foundation outputs"
          git pull --rebase origin main || true
          git push origin HEAD:main || true
